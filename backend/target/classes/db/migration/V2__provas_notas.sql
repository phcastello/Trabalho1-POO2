-- V2__provas_notas.sql

-- Tabela: prova
CREATE TABLE prova (
  id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  departamento_id  BIGINT NOT NULL,
  titulo           TEXT NOT NULL,
  data             DATE NOT NULL,
  descricao        TEXT,
  created_at       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT fk_prova_departamento
    FOREIGN KEY (departamento_id)
    REFERENCES departamento(id)
    ON UPDATE CASCADE
    ON DELETE RESTRICT,
  -- Evita duplicar "a mesma prova" no mesmo departamento e dia
  CONSTRAINT uq_prova_unica_por_dep_dia UNIQUE (departamento_id, titulo, data)
);

CREATE TRIGGER tg_prova_updated_at
BEFORE UPDATE ON prova
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE INDEX ix_prova_departamento_data ON prova(departamento_id, data);

-- Tabela: nota (tabela de junção Aluno-Prova com atributo "valor")
CREATE TABLE nota (
  aluno_id         BIGINT NOT NULL,
  prova_id         BIGINT NOT NULL,
  valor            NUMERIC(5,2) NOT NULL,
  observacao       TEXT,
  created_at       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT pk_nota PRIMARY KEY (aluno_id, prova_id),
  CONSTRAINT fk_nota_aluno
    FOREIGN KEY (aluno_id) REFERENCES aluno(id)
    ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT fk_nota_prova
    FOREIGN KEY (prova_id) REFERENCES prova(id)
    ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT ck_nota_valor CHECK (valor >= 0 AND valor <= 10)
);

CREATE TRIGGER tg_nota_updated_at
BEFORE UPDATE ON nota
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

-- Consistência: aluno e prova DEVEM pertencer ao MESMO departamento.
CREATE OR REPLACE FUNCTION check_nota_mesmo_departamento()
RETURNS TRIGGER AS $$
DECLARE
  dep_aluno BIGINT;
  dep_prova BIGINT;
BEGIN
  SELECT departamento_id INTO dep_aluno FROM aluno WHERE id = NEW.aluno_id;
  SELECT departamento_id INTO dep_prova FROM prova WHERE id = NEW.prova_id;

  IF dep_aluno IS NULL OR dep_prova IS NULL OR dep_aluno <> dep_prova THEN
    RAISE EXCEPTION 'Aluno (%) e Prova (%) pertencem a departamentos distintos (% vs %)',
      NEW.aluno_id, NEW.prova_id, dep_aluno, dep_prova
      USING ERRCODE = '23514'; -- check_violation
  END IF;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER tg_nota_mesmo_departamento
BEFORE INSERT OR UPDATE ON nota
FOR EACH ROW EXECUTE FUNCTION check_nota_mesmo_departamento();
