-- V1__init.sql

-- Timestamps automáticos (updated_at)
CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at := NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Tabela: departamento
CREATE TABLE departamento (
  id                BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome              TEXT NOT NULL UNIQUE,
  sigla             TEXT,
  created_at        TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at        TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT ck_departamento_sigla_len CHECK (sigla IS NULL OR length(sigla) BETWEEN 1 AND 10)
);

CREATE TRIGGER tg_departamento_updated_at
BEFORE UPDATE ON departamento
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

-- Tabela: aluno
CREATE TABLE aluno (
  id                BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ra                VARCHAR(20) NOT NULL UNIQUE,
  nome              TEXT NOT NULL,
  email             TEXT UNIQUE, -- unicidade case-insensitive será por índice funcional
  departamento_id   BIGINT NOT NULL,
  data_nascimento   DATE,
  created_at        TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at        TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT fk_aluno_departamento
    FOREIGN KEY (departamento_id)
    REFERENCES departamento(id)
    ON UPDATE CASCADE
    ON DELETE RESTRICT
);

CREATE TRIGGER tg_aluno_updated_at
BEFORE UPDATE ON aluno
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

-- Unicidade case-insensitive para email (sem precisar de extensão CITEXT)
CREATE UNIQUE INDEX ux_aluno_email_lower ON aluno ((LOWER(email))) WHERE email IS NOT NULL;

-- Acelera filtros/paginação por departamento
CREATE INDEX ix_aluno_departamento ON aluno(departamento_id);
